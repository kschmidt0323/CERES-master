from __future__ import division #so that 1/3=0.333 instead of 1/3=0
__author__ = "Kevin Schmidt - kevin.daniel.schmidt@gmail.com"

# import libraries

import os, sys, random, datetime, time, psychopy
from psychopy import visual, core, data, event, logging, gui, sound
import numpy as np

stimulusFolder="C:\\Users\\lab-user\\Desktop\\test" # there needs to be a Clips and a Maps subfolder for the stimuli here

cfg="""
test_Scene_A.png F2_1_0_0_0_A.avi   0   0  90  100
test_Scene_B.png F2_1_0_0_0_B.avi  20  20 180   80
test_Scene_C.png F2_1_0_0_0_C.avi -20 -20 270   60

"""


class mapTrial:
    def __init__(self, mapFileName, videoFileName, xCoor, yCoor, orientation, difficulty):
        self.mapFileName = mapFileName
        self.videoFileName = videoFileName
        self.xCoor = xCoor
        self.yCoor = yCoor
        self.orientation = orientation
        self.difficulty = difficulty #this adapts to the difficulty level

    def load(self,mapDir,videoDir):
        self.mapFileName=os.path.join(mapDir,self.mapFileName)
        self.videoFileName=os.path.join(videoDir,self.videoFileName)
        return

    def showMap(self):
        win = psychopy.visual.Window(
            size=[1500, 1500],
            units="pix",
            fullscr=True
        )
        
        img = psychopy.visual.ImageStim(
            win = win,
            image = self.mapFileName,
            units = "pix"
        )
        
        #shows the general spawn position, based on difficulty (performance)
        circle = psychopy.visual.Circle(
            win=win,
            radius = self.difficulty, # this has to adapt to the difficulty level
            lineColor='blue',
            fillColor='blue',
            opacity=.05, #Test this for optimization
            pos=(self.xCoor, self.yCoor), #this needs to be based on the tuple #THIS WILL HAVE TO VARY BASED ON THE SPAW COOREDINATES # answerKey[1][2] this is how you look into answerKey dictionary, the 2nd key, and the 3rd value in the list associated with the key, which would be the orientation in this case
            edges=32
        )
                
        img.draw()
        circle.draw()
        win.flip()
        psychopy.event.waitKeys()    

    def showVideo(self):
        win = visual.Window((1500, 1500), fullscr=True)
        mov = visual.MovieStim3(win, self.videoFileName, size=(1500, 1500))
        
        while mov.status != visual.FINISHED:
            mov.draw()
            win.flip()

    def getResponse(self):
        # mouse click to place arrow
        # start=getCurrentTime()
        # while (getCurrentTime()-start)<2000:
        #   if mouse down, draw arrow at mouse (x,y)
        #   if mouse up:
        #       self.response=(x,y)
        #       self.reactionTime=getCurrentTime-start
        # then rotate arrow to chosen direction
        return

    def giveFeedback(self):
        # show the correct arrow placement
        return
        
    def ITI(self):
        # wait 1000ms
        return

#End of mapTrial Class



# f=open('filename.cfg','r')
# d=f.readlines()
# f.close()
# for i in d:
#    ...parse config file lines

#####################
# Load cfg and set up trials
expTrials=[]
for i in cfg.split('\n'):
    t=i.split()
    if len(t)>0:
        # trial configuration is:
        # <mapfilename> <videofilename> x y orientation difficulty 
        new_trial=mapTrial(t[0], t[1], int(t[2]), int(t[3]), int(t[4]), int(t[5]))
        new_trial.load(os.path.join(stimulusFolder,'Maps'),os.path.join(stimulusFolder,'Clips'))
        expTrials.append(new_trial)



####################
# Main Experiment Loop

for i in expTrials:
    i.showMap()
    i.showVideo()
    i.showMap()
    i.getResponse()
    i.giveFeedback()
    i.ITI()
